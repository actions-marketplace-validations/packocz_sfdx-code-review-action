name: 'Pull Request SFDX Code Review'
description: 'Uses Salesforce Code Analyzer to create a Pull Request Review including inline Comments'
inputs:
  source_path:
    description: 'Path to the package folder containing source to be analysed'
    required: true
    default: 'force-app/**/*'
  github_token:
    description: 'Pass in the GITHUB_TOKEN secret to be able to make the Create PR Review API Call'
    required: true
  reject_threshold:
    description: 'Single Issue with this severity will cause the review to request changes'
    required: false
  approve_threshold:
    description: 'If all Issues are less severe than this the review will give approval'
    required: false
  category:
    description: 'categor(ies) of rules to run'
    required: false
branding:
  icon: 'check'
  color: 'blue'

runs:
  using: 'composite'
  steps: 
    - name: Clone Repository (Latest)
      uses: actions/checkout@v2
      with:
          fetch-depth: 0
          ref: ${{ github.event.inputs.ref }}

    - name: Fetch PR head and base
      shell: bash
      run: |
          git fetch origin ${{ github.base_ref }}
          git fetch origin ${{ github.head_ref }}
    
    - name: 'Get GitDiff from GitHub PR API'
      uses: octokit/request-action@v2.x
      id: fetch_diff
      with:
          route: GET https://patch-diff.githubusercontent.com/raw/${{ github.repository }}/pull/${{ github.event.number }}.diff 
      env:
          GITHUB_TOKEN: ${{ inputs.github_token }}
    
    - name: 'Write diff to file'
      uses: DamianReeves/write-file-action@v1.0
      with:
          path: diff.txt
          contents: "${{ steps.fetch_diff.outputs.data }}"
          write-mode: overwrite

    - name: Do git diff to limit SFDX Analyzer
      shell: bash
      id: getdiff
      run: echo "::set-output name=difflist::$(git diff --name-only --diff-filter=MCRA $(git merge-base --fork-point origin/${{ github.base_ref }} origin/${{ github.head_ref }})..origin/${{ github.head_ref }} ${{ inputs.source_path }} | paste -sd "," -)"

    - name: Install Salesforce CLI
      shell: bash
      run: |
          wget https://developer.salesforce.com/media/salesforce-cli/sfdx-linux-amd64.tar.xz
          mkdir sfdx-cli
          tar xJf sfdx-linux-amd64.tar.xz -C sfdx-cli --strip-components 1
          ./sfdx-cli/install

    - name: 'Install Code Scanner'
      shell: bash
      run: sfdx plugins:install @salesforce/sfdx-scanner

    - name: 'Run Code Scanner'
      if: ${{ inputs.category == ''}}
      shell: bash
      run: sfdx scanner:run -t "${{ steps.getdiff.outputs.difflist }}" -f csv --normalize-severity  > report.csv
    
    - name: 'Run Code Scanner'
      if: ${{ inputs.category != ''}}
      shell: bash
      run: sfdx scanner:run -t "${{ steps.getdiff.outputs.difflist }}" -c '${{ inputs.category }}' -f csv --normalize-severity  > report.csv

    - name: 'Convert report to json'
      shell: bash
      run: cat report.csv | python -c 'import csv, json, sys; print(json.dumps([dict(r) for r in csv.DictReader(sys.stdin)]))' > report.json

    - name: 'Transform report to review comments'
      shell: bash
      run: |
          echo "`jq -c 'map({path: (.File | split("${{ github.event.repository.name }}/")[2]), position: .Line, severity: .Severity, body: (.Description + " (" + .Engine + " - " + .Rule + " - " + "Severity: " + .Severity + ")")})' report.json`" > comments.json

    - name: 'Translate Line to Position, filter issues outside diff and Evaluate Approval'
      shell: bash
      run: |
          node ${{ github.action_path }}/scripts/node/parse.js diff.txt comments.json ${{ inputs.reject_threshold }} ${{ inputs.approve_threshold }}

    - name: Read Comments File
      shell: bash
      id: getcomments
      run: echo "::set-output name=comments::$(cat comments.json)"

    - name: Read Review Event File
      shell: bash
      id: getevent
      run: echo "::set-output name=event::$(cat reviewEvent.txt)"

    - name: Read Review Body File
      shell: bash
      id: getbody
      run: echo "::set-output name=body::$(cat reviewBody.txt)"

    - name: 'Create Review'
      uses: octokit/request-action@v2.x
      with:
          route: POST /repos/{repo}/pulls/{pull_number}/reviews
          repo: ${{ github.repository }}
          pull_number: ${{ github.event.number }}
          body: '${{ steps.getbody.outputs.body }}'
          event: '${{ steps.getevent.outputs.event }}'
          comments: '${{ steps.getcomments.outputs.comments }}'
      env:
          GITHUB_TOKEN: ${{ inputs.github_token }}